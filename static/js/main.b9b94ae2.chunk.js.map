{"version":3,"sources":["components/Heatmap.js","components/HeatmapList.js","components/Header.js","components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["Heatmap","_this$props$school","this","props","school","usage","name","react_default","a","createElement","style","backgroundColor","padding","marginTop","boxShadow","borderRadius","fontSize","react_calendar_heatmap_umd_default","startDate","Date","date","now","endDate","values","showWeekdayLabels","classForValue","v","n","Math","ceil","count","concat","tooltipDataAttrs","data-tip","moment","format","dist_default","React","PureComponent","HeatmapList","schools","marginLeft","marginRight","map","components_Heatmap","key","Header","Loading","width","height","display","justifyContent","alignItems","color","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","App","state","_this2","ref","once","s","val","anonymous","k","pipe","filter","undefined","STOPDT","fpMap","slice","groupBy","convert","cap","length","setState","sortBy","reverse","className","components_Header","components_HeatmapList","components_Loading","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9b94ae2.chunk.js","sourcesContent":["import React from 'react'\r\nimport CalendarHeatmap from 'react-calendar-heatmap'\r\nimport moment from 'moment'\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\nclass Heatmap extends React.PureComponent {\r\n  render() {\r\n    const { usage, name } = this.props.school\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: '#fff',\r\n          padding: '1rem',\r\n          marginTop: '1rem',\r\n          boxShadow: '0 4px 8px 0 rgba(0,0,0,0.2)',\r\n          borderRadius: 5,\r\n        }}\r\n      >\r\n        <p style={{ fontSize: '2vw' }}>{name}</p>\r\n        <CalendarHeatmap\r\n          startDate={usage[0] ? new Date(usage[0].date) : Date.now()}\r\n          endDate={Date.now()}\r\n          values={usage}\r\n          showWeekdayLabels\r\n          classForValue={v => {\r\n            if (!v) {\r\n              return 'color-empty'\r\n            }\r\n            const n = Math.ceil(v.count / 5)\r\n            return `color-gitlab-${n > 4 ? 4 : n}`\r\n          }}\r\n          tooltipDataAttrs={v => ({\r\n            'data-tip': v.date\r\n              ? `${moment(v.date).format('DD/MM/YYYY')} ใช้งาน ${v.count} ครั้ง`\r\n              : '',\r\n          })}\r\n        />\r\n        <ReactTooltip />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Heatmap\r\n","import React from 'react'\r\nimport map from 'lodash/map'\r\nimport Heatmap from './Heatmap'\r\n\r\nclass HeatmapList extends React.PureComponent {\r\n  render() {\r\n    const { schools } = this.props\r\n    return (\r\n      <div style={{ marginLeft: 10, marginRight: 10 }}>\r\n        {map(schools, v => (\r\n          <Heatmap key={v.name} school={v} />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HeatmapList\r\n","import React from 'react'\r\n\r\nclass Header extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: '#50dfb7',\r\n          padding: 10,\r\n        }}\r\n      >\r\n        <p style={{ fontSize: '2vw' }}>\r\n          สถิติการใช้งานคอมพิวเตอร์ โครงการคอมพิวเตอร์มือสองเพื่อน้องในชนบท\r\n          (COM2KIDS)\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nclass Loading extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          height: '100%',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          color: '#2b765d',\r\n        }}\r\n      >\r\n        <h1>Loading...</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Loading\r\n","import React from 'react'\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/database'\r\nimport filter from 'lodash/fp/filter'\r\nimport map from 'lodash/map'\r\nimport fpMap from 'lodash/fp/map'\r\nimport pipe from 'lodash/fp/pipe'\r\nimport groupBy from 'lodash/fp/groupBy'\r\nimport sortBy from 'lodash/sortBy'\r\nimport moment from 'moment'\r\nimport HeatmapList from './components/HeatmapList'\r\nimport Header from './components/Header'\r\nimport Loading from './components/Loading'\r\nimport 'react-calendar-heatmap/dist/styles.css'\r\n\r\nconst db = firebase\r\n  .initializeApp({\r\n    apiKey: 'AIzaSyCsxH-qYnqMbiXlkjB1SLJBZreW9sUAgUw',\r\n    authDomain: 'com2kids-5be26.firebaseapp.com',\r\n    databaseURL: 'https://com2kids-5be26.firebaseio.com',\r\n    projectId: 'com2kids-5be26',\r\n    storageBucket: 'com2kids-5be26.appspot.com',\r\n    messagingSenderId: '56322755216',\r\n  })\r\n  .database()\r\n\r\nclass App extends React.PureComponent {\r\n  state = {\r\n    schools: null,\r\n  }\r\n  componentDidMount() {\r\n    db.ref('/').once('value', s => {\r\n      let schools = s.val()\r\n      delete schools.anonymous\r\n      schools = map(schools, (v, k) => ({\r\n        name: k,\r\n        usage: pipe(\r\n          filter(v => v.STOPDT !== undefined),\r\n          fpMap(v => ({\r\n            date: moment(\r\n              `${v.STOPDT.slice(4, 10)} ${v.STOPDT.slice(-4)}`,\r\n              'MMM DD YYYY',\r\n            ).format('YYYY-MM-DD'),\r\n          })),\r\n          groupBy('date'),\r\n          fpMap.convert({ cap: false })((v, k) => ({\r\n            date: k,\r\n            count: v.length,\r\n          })),\r\n        )(v.usage),\r\n      }))\r\n      this.setState({\r\n        schools: sortBy(schools, v => v.usage.length).reverse(),\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { schools } = this.state\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        {schools ? <HeatmapList schools={schools} /> : <Loading />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}